CONFIG   ?= release
CC       ?= gcc
BUILD    := build/$(CONFIG)
SRC      := src
VENDOR   := vendor/civetweb
INCLUDES := -I. -I$(SRC) -I$(VENDOR)
LIBS     := -lcurl -ljansson

GTK_LIBS := $(shell pkg-config --cflags --libs gtk4)
CRIT_LIBS := $(shell pkg-config --cflags --libs criterion)

ifeq ($(CONFIG),debug)
  CFLAGS := -Wall -Wextra -pedantic -std=c11 -DOPENSSL_API_3_0 -g -O0 -DDEBUG
else
  CFLAGS := -Wall -Wextra -pedantic -std=c11 -DOPENSSL_API_3_0 -O2
endif

CLI_SRCS := $(SRC)/main.c $(SRC)/user.c $(SRC)/server.c $(VENDOR)/civetweb.c
GUI_SRCS := $(SRC)/gui.c
TEST_SRCS := tests/test_user.c $(SRC)/user.c

CLI_BIN := $(BUILD)/github_user_fetcher
GUI_BIN := $(BUILD)/github_user_fetcher_gui
TEST_BIN := $(BUILD)/test_user
STATIC_LIB := $(BUILD)/libuser.a
SHARED_LIB := $(BUILD)/libuser.so

# === Targets ===

.PHONY: all clean test run run-cli run-gui run-server lib static shared

all: $(CLI_BIN) $(GUI_BIN)

$(BUILD):
	mkdir -p $@

$(CLI_BIN): $(CLI_SRCS) | $(BUILD)
	$(CC) $(CFLAGS) $(INCLUDES) $^ -o $@ $(LIBS)

$(GUI_BIN): $(GUI_SRCS) | $(BUILD)
	$(CC) $(CFLAGS) $(INCLUDES) $^ -o $@ $(GTK_LIBS)

$(TEST_BIN): $(TEST_SRCS) | $(BUILD)
	$(CC) $(CFLAGS) -DTESTING $(INCLUDES) $^ -o $@ $(LIBS) $(CRIT_LIBS)

# === Library builds ===

static: $(STATIC_LIB)

$(STATIC_LIB): $(SRC)/user.c | $(BUILD)
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $(BUILD)/user.o
	ar rcs $@ $(BUILD)/user.o

shared: $(SHARED_LIB)

$(SHARED_LIB): $(SRC)/user.c | $(BUILD)
	$(CC) $(CFLAGS) $(INCLUDES) -fPIC -c $< -o $(BUILD)/user.o
	$(CC) -shared -o $@ $(BUILD)/user.o

# === Utilities ===

clean:
	rm -rf $(BUILD) access.log

test: $(TEST_BIN)
	$(TEST_BIN)

run: run-gui

run-cli: $(CLI_BIN)
	$(CLI_BIN)

run-server: $(CLI_BIN)
	$(CLI_BIN) --server

run-gui: $(GUI_BIN)
	$(GUI_BIN)

debug:
	@echo "CONFIG: $(CONFIG)"
	@echo "CC: $(CC)"
	@echo "CFLAGS: $(CFLAGS)"
	@echo "INCLUDES: $(INCLUDES)"
	@echo "LIBS: $(LIBS)"
